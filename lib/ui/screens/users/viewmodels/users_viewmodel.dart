/// Generated By XFlutter Cli.
///
/// state management for UI
import 'package:animated_infinite_scroll_pagination/animated_infinite_scroll_pagination.dart';
import 'package:livedata_app/extensions/nullable_extensions.dart';
import 'package:livedata_app/models/data_models.dart';
import 'package:livedata_app/repositories/user_repository.dart';
import 'package:livedata_app/events/event_emitter.dart';
import 'package:lazy_evaluation/lazy_evaluation.dart';
import 'package:livedata_app/viewmodels/base_viewmodel.dart';

class UsersViewModel extends BaseViewModel with PaginationViewModel<User> {
  final _userRepository = Lazy(() => UserRepository());
  UserRepository get userRepository => _userRepository.value;

  final _eventEmitter = Lazy(() => EventEmitter<PaginationState<List<User>>>());
  EventEmitter<PaginationState<List<User>>> get eventEmitter => _eventEmitter.value;

  @override
  void onInit() {
    listen();
    getPaginationList();
  }

  @override
  bool areItemsTheSame(User a, User b) => a.id == b.id;

  @override
  Future<void> fetchData(int page) async {
    // emit loading
    eventEmitter.emitValue(const PaginationLoading());
    callHttpRequest<ListResponse<User>>(
      () => userRepository.findAll(page),
      callback: (result) {
        if (result?.list != null && result?.total != null) {
          // emit loaded data
          eventEmitter.emitValue(PaginationSuccess(result?.list?.filterNotNull()));
          setTotal(result?.total ?? 0);
        } else {
          // exception throwed
          eventEmitter.emitValue(const PaginationError());
        }
      },
    );
  }

  @override
  Stream<PaginationState<List<User>>> streamSubscription() => eventEmitter.result;

  @override
  void onDispose() {
    dispose();
    eventEmitter.dispose();
    super.onDispose();
  }
}
